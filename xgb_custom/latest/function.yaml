kind: job
metadata:
  name: xgb-custom
  tag: ''
  hash: 8ae696dcde71f967ee87cebc0b27bc4466f35000
  project: ''
  labels:
    author: yjb
  categories:
  - analysis
spec:
  command: ''
  args: []
  image: mlrun/ml-models
  env: []
  default_handler: fit
  entry_points:
    gen_outliers:
      name: gen_outliers
      doc: simulate data with outliers
      parameters:
      - name: context
        type: MLClientCtx
        doc: the function's execution context
        default: ''
      - name: nrows
        doc: (4096) number of data points
        default: 4096
      - name: feats
        doc: (16) number of features
        default: 16
      - name: outs
        doc: (64) number of outliers
        default: 64
      - name: omax
        doc: (10_100) max value of outliers
        default: 10000
      - name: labels_col
        doc: (labels) name of labels column
        default: labels
      - name: header
        doc: () header for dataset, will default to `feat_`
        default: []
      - name: label_type
        doc: (int32) data type for the label column
        default: int32
      - name: key
        doc: key of datset in artifact store
        default: xgb-outs
      - name: local_path
        doc: path in artifact store where data will be serialized
        default: xgb_custom
      outputs:
      - default: ''
      lineno: 22
    gradient:
      name: gradient
      doc: gradient of squared log error
      parameters:
      - name: predt
        type: ndarray
        default: ''
      - name: dtrain
        type: DMatrix
        default: ''
      outputs:
      - default: ''
      lineno: 59
    hessian:
      name: hessian
      doc: hessian of squared log error
      parameters:
      - name: predt
        type: ndarray
        default: ''
      - name: dtrain
        type: DMatrix
        default: ''
      outputs:
      - default: ''
      lineno: 65
    squared_log:
      name: squared_log
      doc: 'squared log error objective


        simplified version for RMSLE used as objective function'
      parameters:
      - name: predt
        type: ndarray
        default: ''
      - name: dtrain
        type: DMatrix
        default: ''
      outputs:
      - default: ''
      lineno: 72
    rmsle:
      name: rmsle
      doc: Root mean squared log error metric.
      parameters:
      - name: predt
        type: ndarray
        default: ''
      - name: dtrain
        type: DMatrix
        default: ''
      outputs:
      - default: ''
      lineno: 83
    learning_curves:
      name: learning_curves
      doc: 'plot xgb learning curves


        this will also log a model''s learning curves'
      parameters:
      - name: context
        type: MLClientCtx
        default: ''
      - name: results
        type: dict
        default: ''
      - name: figsz
        type: Tuple[int, int]
        default:
        - 10
        - 10
      - name: plots_dest
        type: str
        default: plots
      outputs:
      - default: ''
      lineno: 91
    fit:
      name: fit
      doc: "low level xgboost train api\n\nfor the xgboost `train` params see:\nhttps://xgboost.readthedocs.io/en/latest/python/python_api.html#xgboost.train\n\
        \nNote:  the first parameter of xgboost's `train` method is a dict of parameters\n\
        \       supplied to the booster (engine).  To modify one of those simply\n\
        \       add a task parameter (when running you supply an mlrun NewTask) with\
        \ the\n       prefix \"XGB_\". So for example, to set the 'tree_method' parameter\
        \ to 'approx',\n       add {\"XGB_tree_method\":\"approx\"} to the task params\
        \ key."
      parameters:
      - name: context
        type: MLClientCtx
        doc: the function context
        default: ''
      - name: dataset
        type: DataItem
        doc: the full data set, train, valid and test will be extracted and each converted
          to a DMatrix for input to xgboost's `train`
        default: ''
      - name: num_boost_round
        type: int
        default: 10
      - name: evals
        type: List[Tuple[DMatrix, str]]
        default: []
      - name: obj
        type: Union[Callable, str]
        default: ''
      - name: feval
        type: Union[Callable, str]
        default: null
      - name: maximize
        type: bool
        default: false
      - name: early_stopping_rounds
        type: int
        default: null
      - name: evals_result
        type: dict
        default: {}
      - name: verbose_eval
        type: bool
        default: true
      - name: xgb_model
        type: DataItem
        default: null
      - name: callbacks
        type: List[Callable]
        default: []
      - name: label_column
        type: str
        doc: ground-truth (y) labels
        default: labels
      - name: encode_cols
        type: dict
        doc: dictionary of names and prefixes for columns that are to hot be encoded.
        default: {}
      - name: sample
        type: int
        doc: Selects the first n rows, or select a sample starting from the first.
          If negative <-1, select a random sample
        default: <_ast.USub object at 0x10c8dc1d0>
      - name: test_size
        type: float
        doc: (0.05) test set size
        default: 0.25
      - name: valid_size
        type: float
        doc: (0.75) Once the test set has been removed the training set gets this
          proportion.
        default: 0.75
      - name: random_state
        type: int
        doc: (1) sklearn rng seed
        default: 1994
      - name: models_dest
        type: str
        doc: destination subfolder for model artifacts
        default: models
      - name: plots_dest
        type: str
        doc: destination subfolder for plot artifacts
        default: plots
      - name: file_ext
        type: str
        doc: format for test_set_key hold out data
        default: csv
      - name: test_set_key
        type: str
        doc: (test-set), key of held out data in artifact store
        default: test-set
      - name: gpus
        type: bool
        doc: (False), run on gpus
        default: false
      outputs:
      - default: ''
      lineno: 112
  description: train an xgboost model using the low-level api
  build:
    functionSourceCode: 
    commands: []
    code_origin: git@github.com:mlrun/functions.git#b11a8e634ab7e617b37823c93041b4acfd60ee58:xgb_custom.ipynb
